/*
 * ThermoPhononsView.java
 *
 * Created on April 29, 2008, 6:14 PM
 */
package br.ufjf.quimica.gfqsi.thermophonons.view;

import br.ufjf.quimica.gfqsi.common.chem.AtomicSite;
import br.ufjf.quimica.gfqsi.common.chem.Molecule;
import br.ufjf.quimica.gfqsi.common.thermodynamics.Thermodynamics;
import br.ufjf.quimica.gfqsi.ecglue.VibrationalOutPutReader;
import br.ufjf.quimica.gfqsi.ecglue.qespresso.DynMatOutputReader;
import br.ufjf.quimica.gfqsi.ecglue.qespresso.PWOutputReader;
import br.ufjf.quimica.gfqsi.thermophonons.LinearMoleculeThermodynamics;
import br.ufjf.quimica.gfqsi.thermophonons.MoleculeThermodynamicsInformation;
import br.ufjf.quimica.gfqsi.thermophonons.NonLinearMoleculeThermodynamics;
import br.ufjf.quimica.gfqsi.thermophonons.SolidStateThermodynamics;
import br.ufjf.quimica.gfqsi.thermophonons.ThermodynamicsInformation;
import java.awt.EventQueue;
import java.awt.Frame;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.text.DecimalFormat;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileFilter;

/**
 *
 * @author Ary Junior <a href="mailto:aryjunior@gmail.com">aryjunior@gmail.com</a>
 * @version $Id: ThermoPhononsView.java,v 1.2 2010-10-22 14:57:06 aryjr Exp $
 * 
 */
public class ThermoPhononsView extends JDialog {

    private SolidStateThermodynamics sst = new SolidStateThermodynamics();
    private LinearMoleculeThermodynamics lmt = new LinearMoleculeThermodynamics();
    private NonLinearMoleculeThermodynamics nlmt = new NonLinearMoleculeThermodynamics();
    private ThermodynamicsInformation thermo;
    private MoleculeThermodynamicsInformation thermom;
    private DecimalFormat df = new DecimalFormat("#0.000");
    private final double KJMOL2KCALMOL = 0.239005736;
    private final double KJMOL2EV = 6.241506363e21 / Thermodynamics.AVOGADRO_CONSTANT;

    /** Creates new form ThermoPhononsView */
    public ThermoPhononsView(Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        txtTotalEnergyFile = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPhononFile = new javax.swing.JTextField();
        btnBrowseTotalEnergyFile = new javax.swing.JButton();
        btnBrowsePhononsFile = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        txtTemperature = new javax.swing.JTextField();
        btnCalculate = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtResults = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        chkLinear = new javax.swing.JCheckBox();
        chkPolyatomic = new javax.swing.JCheckBox();
        lblSymmetryNumber = new javax.swing.JLabel();
        txtSymmetryNumber = new javax.swing.JTextField();
        lblPressure = new javax.swing.JLabel();
        txtPressure = new javax.swing.JTextField();
        chkMolecule = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        cmbEnergyUnit = new javax.swing.JComboBox();
        jLabel5 = new javax.swing.JLabel();
        cmbOutput = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Thermochemistry with phonons - version 1.3.3");

        jLabel1.setText("PWscf total energy file:");

        jLabel2.setText("PWscf phonons file:");

        btnBrowseTotalEnergyFile.setText("Browse");
        btnBrowseTotalEnergyFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowseTotalEnergyFileActionPerformed(evt);
            }
        });

        btnBrowsePhononsFile.setText("Browse");
        btnBrowsePhononsFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowsePhononsFileActionPerformed(evt);
            }
        });

        jLabel3.setText("Temperature(s) in Kelvin:");

        txtTemperature.setText("298.150");

        btnCalculate.setText("Calculate");
        btnCalculate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCalculateActionPerformed(evt);
            }
        });

        txtResults.setColumns(20);
        txtResults.setRows(5);
        jScrollPane1.setViewportView(txtResults);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Molecule options"));

        chkLinear.setText("Linear");
        chkLinear.setEnabled(false);

        chkPolyatomic.setSelected(true);
        chkPolyatomic.setText("Polyatomic");
        chkPolyatomic.setEnabled(false);

        lblSymmetryNumber.setText("Symmetry number:");
        lblSymmetryNumber.setEnabled(false);

        txtSymmetryNumber.setText("1");
        txtSymmetryNumber.setEnabled(false);

        lblPressure.setText("Pressure (atm):");
        lblPressure.setEnabled(false);

        txtPressure.setText("1");
        txtPressure.setEnabled(false);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(chkPolyatomic)
                        .addGap(18, 18, 18)
                        .addComponent(chkLinear))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblSymmetryNumber)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtSymmetryNumber, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblPressure)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtPressure, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkLinear)
                    .addComponent(chkPolyatomic))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSymmetryNumber)
                    .addComponent(txtSymmetryNumber, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtPressure, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPressure))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        chkMolecule.setText("Molecule");
        chkMolecule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkMoleculeActionPerformed(evt);
            }
        });

        jLabel4.setText("Energy unit:");

        cmbEnergyUnit.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "kJ/mol", "kcal/mol", "eV" }));
        cmbEnergyUnit.setEnabled(false);

        jLabel5.setText("Output:");

        cmbOutput.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Complete", "Internal energies versus temperatures", "Entropies versus temperatures", "Enthalpies versus temperatures", "Helmholtz energies versus temperatures", "Gibbs energies versus temperatures" }));
        cmbOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbOutputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chkMolecule)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel1)
                                .addComponent(jLabel2)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGap(124, 124, 124))
                                .addComponent(txtPhononFile)
                                .addComponent(txtTotalEnergyFile, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                                .addComponent(txtTemperature, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(btnBrowsePhononsFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnBrowseTotalEnergyFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(cmbEnergyUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCalculate, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 371, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbOutput, 0, 311, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel5)
                    .addComponent(cmbOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(txtTotalEnergyFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtPhononFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtTemperature, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(chkMolecule))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBrowseTotalEnergyFile)
                                .addGap(41, 41, 41)
                                .addComponent(btnBrowsePhononsFile)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnCalculate)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel4)
                        .addComponent(cmbEnergyUnit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void btnBrowseTotalEnergyFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowseTotalEnergyFileActionPerformed
        JFileChooser fc = new JFileChooser(new File(System.getProperty("user.dir")));
        fc.addChoosableFileFilter(new OutFileFilter());
        int option = fc.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            txtTotalEnergyFile.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }//GEN-LAST:event_btnBrowseTotalEnergyFileActionPerformed

    private void btnBrowsePhononsFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowsePhononsFileActionPerformed
        JFileChooser fc = new JFileChooser(new File(System.getProperty("user.dir")));
        fc.addChoosableFileFilter(new OutFileFilter());
        int option = fc.showOpenDialog(this);
        if (option == JFileChooser.APPROVE_OPTION) {
            txtPhononFile.setText(fc.getSelectedFile().getAbsolutePath());
        }
}//GEN-LAST:event_btnBrowsePhononsFileActionPerformed

    private void btnCalculateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCalculateActionPerformed
        if (txtTemperature.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Oops! Set the temperature in Kelvin, please!");
        } else if (txtPhononFile.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Oops! Choose the dynmat.x output file first, please!");
        } else if (txtTotalEnergyFile.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Oops! Choose the pw.x output file, please!");
        } else if (chkMolecule.isSelected() && txtPressure.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Oops! Set the pressure in atm, please!");
        } else if (chkMolecule.isSelected() && txtSymmetryNumber.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Oops! Set the symmetry number, please!");
        } else {
            try {
                PWOutputReader pwout = new PWOutputReader();
                pwout.loadFile(txtTotalEnergyFile.getText());
                // Set the informations on objects
                if (chkMolecule.isSelected()) {
                    if (chkLinear.isSelected()) {
                        lmt.setMolecule(pwout.getLastCoordinates(), true);
                        lmt.setSymmetryNumber(Double.parseDouble(txtSymmetryNumber.getText()));
                        thermo = lmt;
                        thermom = lmt;
                    } else {
                        nlmt.setMolecule(pwout.getLastCoordinates(), false);
                        nlmt.setSymmetryNumber(Double.parseDouble(txtSymmetryNumber.getText()));
                        thermo = nlmt;
                        thermom = nlmt;
                    }
                } else {
                    thermo = sst;
                    thermom = null;
                }
                thermo.setElectronicEnergy((pwout.getLastEnergy() * Thermodynamics.RYDBERG_CONSTANT * Thermodynamics.AVOGADRO_CONSTANT) / 1000d);
                DynMatOutputReader dynout = new DynMatOutputReader();
                dynout.setReadRule(VibrationalOutPutReader.IGNORE_NULL_FREQUENCIES);
                dynout.loadFile(txtPhononFile.getText());
                thermo.setVibrationalModesWaveNumbers(dynout.getVibrationalModesWaveNumbers());
                thermo.setPressure(Double.parseDouble(txtPressure.getText()));
                thermo.setTemperatures(txtTemperature.getText());
                String out = "";
                // The unit conversor factor F
                double F = 1;
                if (cmbEnergyUnit.isEnabled() && cmbEnergyUnit.getSelectedIndex() == 1) {
                    F = KJMOL2KCALMOL;
                } else if (cmbEnergyUnit.isEnabled() && cmbEnergyUnit.getSelectedIndex() == 2) {
                    F = KJMOL2EV;
                }
                if (cmbOutput.getSelectedIndex() == 0) {
                    out += " ############################################################\n";
                    out += " #              Thermochemistry\n";
                    out += " ############################################################\n";
                    for (int inc = 0; inc < thermo.getTemperatures().length; inc++) {
                        out += writeTemperatureOut(inc);
                    }
                } else if (cmbOutput.getSelectedIndex() == 1) {
                    // E x T
                    for (int inc = 0; inc < thermo.getTemperatures().length; inc++) {
                        out += (F * thermo.getTotalEnergy(inc)) + " " + thermo.getTemperatures()[inc] + "\n";
                    }
                } else if (cmbOutput.getSelectedIndex() == 2) {
                    // S x T
                    for (int inc = 0; inc < thermo.getTemperatures().length; inc++) {
                        out += (F * thermo.getTotalEntropy(inc)) + " " + thermo.getTemperatures()[inc] + "\n";
                    }
                } else if (cmbOutput.getSelectedIndex() == 3) {
                    // H x T
                    for (int inc = 0; inc < thermo.getTemperatures().length; inc++) {
                        out += (F * getEnthalpy(inc)) + " " + thermo.getTemperatures()[inc] + "\n";
                    }
                } else if (cmbOutput.getSelectedIndex() == 4) {
                    // A x T
                    for (int inc = 0; inc < thermo.getTemperatures().length; inc++) {
                        out += (F * getHelmholtzEnergy(inc)) + " " + thermo.getTemperatures()[inc] + "\n";
                    }
                } else if (cmbOutput.getSelectedIndex() == 5) {
                    // G x T
                    for (int inc = 0; inc < thermo.getTemperatures().length; inc++) {
                        out += (F * getGibbsEnergy(inc)) + " " + thermo.getTemperatures()[inc] + "\n";
                    }
                }
                txtResults.setText(out);
            } catch (FileNotFoundException ex) {
                Logger.getLogger(ThermoPhononsView.class.getName()).log(Level.SEVERE, null, ex);
            } catch (IOException ex) {
                Logger.getLogger(ThermoPhononsView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_btnCalculateActionPerformed

    private String writeTemperatureOut(int inct) {
        String out = "";
        out += " Temperature   " + df.format(thermo.getTemperatures()[inct]) + " Kelvin.  Pressure   " + txtPressure.getText() + " Atm.\n\n";
        out += "Electronic energy: " + (thermo.getElectronicEnergy()) + " kJ/mol\n";
        out += " ------------------------------\n";
        if (chkMolecule.isSelected()) {
            out += writeMoleculeInformation();
            out += " - Translational contribution -\n";
            if (chkLinear.isSelected()) {
                out += "U(trans): " + lmt.getTranslationalInternalEnergies()[inct] + " kJ/mol\n";
                out += "S(trans): " + lmt.getTranslationalEntropies()[inct] + " kJ/(molK)\n";
            } else {
                out += "U(trans): " + nlmt.getTranslationalInternalEnergies()[inct] + " kJ/mol\n";
                out += "S(trans): " + nlmt.getTranslationalEntropies()[inct] + " kJ/(molK)\n";
            }
            out += " ------------------------------\n\n";
            out += " - Rotational contribution    -\n";
            if (chkLinear.isSelected()) {
                out += "T(rot): " + (lmt.getRotationalTemperature()) + "K\n";
                out += "U(rot): " + lmt.getRotationalInternalEnergies()[inct] + " kJ/mol\n";
                out += "S(rot): " + lmt.getRotationalEntropies()[inct] + " kJ/(molK)\n";
            } else {
                out += "Tx(rot): " + (nlmt.getRotationalTemperatureX()) + "K\n";
                out += "Ty(rot): " + (nlmt.getRotationalTemperatureY()) + "K\n";
                out += "Tz(rot): " + (nlmt.getRotationalTemperatureZ()) + "K\n";
                out += "U(rot): " + nlmt.getRotationalInternalEnergies()[inct] + " kJ/mol\n";
                out += "S(rot): " + nlmt.getRotationalEntropies()[inct] + " kJ/(molK)\n";
            }
            out += " ------------------------------\n\n";
        }
        out += " - Vibrational contribution   -\n";
        out += writeVibrationalTemperatures();
        out += "Zero point energy: " + thermo.getZeroPointEnergy() + " kJ/mol\n";
        out += "U(vib): ZPE + " + thermo.getVibrationalInternalEnergies()[inct] + " kJ/mol\n";
        out += "S(vib): " + thermo.getVibrationalEntropies()[inct] + " kJ/(molK)\n";
        out += " ------------------------------\n\n";
        out += "-TS: " + (-thermo.getTemperatures()[inct] * thermo.getTotalEntropy(inct)) + " kJ/mol\n";
        out += "Enthalpy: " + getEnthalpy(inct) + " kJ/mol\n";
        out += "Internal energy: " + thermo.getTotalEnergy(inct) + " kJ/mol\n";
        out += "Helmholtz energy: " + getHelmholtzEnergy(inct) + " kJ/mol\n";
        out += "Gibbs energy: " + getGibbsEnergy(inct) + " kJ/mol\n";
        out += " ------------------------------\n\n";
        return out;
    }

    private void chkMoleculeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkMoleculeActionPerformed
        chkPolyatomic.setEnabled(chkMolecule.isSelected());
        chkLinear.setEnabled(chkMolecule.isSelected());
        txtSymmetryNumber.setEnabled(chkMolecule.isSelected());
        txtPressure.setEnabled(chkMolecule.isSelected());
        lblSymmetryNumber.setEnabled(chkMolecule.isSelected());
        lblPressure.setEnabled(chkMolecule.isSelected());
    }//GEN-LAST:event_chkMoleculeActionPerformed

    private void cmbOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbOutputActionPerformed
        cmbEnergyUnit.setEnabled(cmbOutput.getSelectedIndex() != 0);
    }//GEN-LAST:event_cmbOutputActionPerformed

    private String writeMoleculeInformation() {
        String out = "";
        AtomicSite site;
        double mm = 0d;
        Molecule m = thermom.getMolecule();
        for (int inc = 0; inc < m.countAtomicSites(); inc++) {
            site = m.getAtomicSite(inc);
            out += " Atom  " + (inc + 1) + " has atomic number " + site.getAtom().getElement().getAtomicNumber() + " and mass  " + site.getAtom().getElement().getWeight() + "\n";
            mm += site.getAtom().getElement().getWeight();
        }
        if (chkLinear.isSelected()) {
            out += " Moment of inertia:   " + (m.getMomentOfInertia() / (Thermodynamics.AVOGADRO_CONSTANT * 1e23)) + " \n";
        } else {
            out += " Moment of inertia X:   " + (m.getMomentOfInertiaXX() / (Thermodynamics.AVOGADRO_CONSTANT * 1e23)) + " \n";
            out += " Moment of inertia Y:   " + (m.getMomentOfInertiaYY() / (Thermodynamics.AVOGADRO_CONSTANT * 1e23)) + " \n";
            out += " Moment of inertia Z:   " + (m.getMomentOfInertiaZZ() / (Thermodynamics.AVOGADRO_CONSTANT * 1e23)) + " \n";
        }
        out += " Molecular mass:   " + mm + " amu.\n\n";
        return out;
    }

    private String writeVibrationalTemperatures() {
        String out = "";
        double[] ts = thermo.getVibrationalTemperatures();
        for (int inc = 0; inc < ts.length; inc++) {
            out += "Mode " + (inc + 1) + ", T(vib) = " + ts[inc] + "\n";
        }
        return out + "\n\n";
    }

    /*
     *
     */
    private double getEnthalpy(int inct) {
        return thermo.getTotalEnergy(inct) + (chkMolecule.isSelected() ? (Thermodynamics.AVOGADRO_CONSTANT * Thermodynamics.BOLTZMANN_CONSTANT * thermo.getTemperatures()[inct]) / 1000d : 0d);
    }

    /*
     *
     */
    private double getHelmholtzEnergy(int inct) {
        return thermo.getTotalEnergy(inct) - (thermo.getTemperatures()[inct] * thermo.getTotalEntropy(inct));
    }

    /*
     *
     */
    private double getGibbsEnergy(int inct) {
        return getEnthalpy(inct) - (thermo.getTemperatures()[inct] * thermo.getTotalEntropy(inct));
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        EventQueue.invokeLater(new Runnable() {

            public void run() {
                ThermoPhononsView dialog = new ThermoPhononsView(new JFrame(), true);
                dialog.addWindowListener(new WindowAdapter() {

                    @Override
                    public void windowClosing(WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowsePhononsFile;
    private javax.swing.JButton btnBrowseTotalEnergyFile;
    private javax.swing.JButton btnCalculate;
    private javax.swing.JCheckBox chkLinear;
    private javax.swing.JCheckBox chkMolecule;
    private javax.swing.JCheckBox chkPolyatomic;
    private javax.swing.JComboBox cmbEnergyUnit;
    private javax.swing.JComboBox cmbOutput;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPressure;
    private javax.swing.JLabel lblSymmetryNumber;
    private javax.swing.JTextField txtPhononFile;
    private javax.swing.JTextField txtPressure;
    private javax.swing.JTextArea txtResults;
    private javax.swing.JTextField txtSymmetryNumber;
    private javax.swing.JTextField txtTemperature;
    private javax.swing.JTextField txtTotalEnergyFile;
    // End of variables declaration//GEN-END:variables
}

class OutFileFilter extends FileFilter {

    private String extension = ".out";

    public boolean accept(File file) {
        String filename = file.getName();
        return filename.indexOf(extension) > 0 || file.isDirectory();
    }

    public String getDescription() {
        return "*.out*";
    }
}
